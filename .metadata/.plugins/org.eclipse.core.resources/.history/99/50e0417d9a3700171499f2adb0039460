package picasso2;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.LayoutManager;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.border.Border;

/*PF: This is where the actual buffered image is rendered
 * Observable to CanvasConainer
 */

public class CanvasPanel extends JPanel implements NewObservable {
	
	private PicassoModel model;
	private NewObserver observer;
	
	public CanvasPanel(PicassoModel model) {
		//PF: Set bounds of Canvas
		setBounds(0, 0, 300, 300);
		
		//PF: Set MinimumSize of Canvas
		setMinimumSize(new Dimension(100, 100));
		
		//PF: Set Border to Black Line Border
		setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		//PF: Store model in internal private variable
		this.model = model;
		
		//PF: Set observer to null
		observer = null;
		
	}
	
	/*PF: This is the function called 
	 * when the Canvas gets repainted.
	 * Overrides paintComponent of JPanel.
	 * This allows Buffered Images to be drawn
	 */
	@Override
	public void paintComponent(Graphics g) {
		/* PF: Send graphics to JPanel above.
		 * Allows the background of the component
		 * to be opaque
		 */
		super.paintComponent(g);
		
		//PF: Draw Buffered Image at (0,0)
		g.drawImage(model.getBufferedImage(), 0, 0, null);
	}
	
	/*PF: Returns the location of the left-side 
	 * of the canvas based off its container
	 */
	public int getLeftSide() {
		return getLocation().x;
	}

	/*PF: Returns the location of the top-side 
	 * of the canvas based off its container
	 */
	public int getTopSide() {
		return getLocation().y;
	}
	
	/*PF: Returns the location of the right-side 
	 * of the canvas based off its container
	 */
	public int getRightSide() {
		return getLocation().x + getWidth();
	}
	
	/*PF: Returns the location of the bottom-side 
	 * of the canvas based off its container
	 */
	public int getBottomSide() {
		return getLocation().y + getHeight();
	}

	@Override
	public void addObserver(NewObserver o) {
		observer = o;
	}

	@Override
	public void notifyObserver() {
		// TODO Auto-generated method stub
		
	}
}
