package picasso2;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.LayoutManager;

import javax.swing.JPanel;

/*PF: This is the container that holds Canvas
 * **NOTE** This is also the viewport for JScrollPane
 * Observer of Canvas
 */

public class CanvasContainer extends JPanel implements NewObserver {
	
	private CanvasPanel canvas_panel;
	private int se_circle_x;
	private int se_circle_y;
	private int se_circle_radius;
	private Color se_circle_colorfill;
	private Color se_circle_colordraw;
	
	public CanvasContainer(CanvasPanel cp) {
		/*PF: Set Layout to null to 
		 * allow for resizing Canvas
		 */
		setLayout(null);
		
		setPreferredSize(new Dimension(500, 500));
		
		//PF: Save Canvas into a variable
		canvas_panel = cp;
		
		//PF: Add Canvas to container
		this.add(canvas_panel);
		
		/*PF: Create SE circle for resizing
		 * Set fill (inside) to white
		 * Set draw (border) to black
		 */
		se_circle_x = canvas_panel.getX() + canvas_panel.getWidth() - 2;
		se_circle_y = canvas_panel.getY() + canvas_panel.getHeight() - 2;
		se_circle_radius = 7;
		se_circle_colorfill = Color.WHITE;
		se_circle_colordraw = Color.BLACK;
		
		/*PF: Create ResizeListener.
		 * Bottom and Right inset are set
		 * to diameter of SE circle - 1
		 * **NOTE** Insets are empty spaces 
		 * around Canvas where the 
		 * cursor can resize Canvas 
		 * (where cursor turns into resize cursors)
		 */
		ResizeListener rl = new ResizeListener(this, canvas_panel, 0, se_circle_radius*2 - 1, 0, se_circle_radius*2 - 1);
		
		//PF: Add ResizeListener as MouseListener and MouseMotionListener
		addMouseListener(rl);
		addMouseMotionListener(rl);
	}
	
	
	/*PF: This is the function called 
	 * when the container gets repainted.
	 * Overrides paintComponent of JPanel.
	 * This allows for the SE circle 
	 * for the resize cursor to be drawn
	 */
	@Override
	public void paintComponent(Graphics g){
		super.paintComponent(g);
		
		se_circle_x = canvas_panel.getX() + canvas_panel.getWidth() - 2;
		se_circle_y = canvas_panel.getY() + canvas_panel.getHeight() - 2;
		
		//PF: Draw SE circle for cursor
		
		//PF: Set fill (interior) color of SE circle
		g.setColor(se_circle_colorfill);
		
		//PF: Fill in this circle with this size
		g.fillOval(se_circle_x, se_circle_y, se_circle_radius, se_circle_radius);
		
		//PF: Set draw (border) color of SE circle
		g.setColor(se_circle_colordraw);
		
		//PF: Draw in this circle with this size
		g.drawOval(se_circle_x, se_circle_y, se_circle_radius, se_circle_radius);
	}


	@Override
	public void update() {
		int left_side = canvas_panel.getLeftSide();
		int right_side = canvas_panel.getRightSide();
		int top_side = canvas_panel.getTopSide();
		int bottom_side = canvas_panel.getBottomSide();
		
		int w = getParent().getWidth();
		int h = getParent().getHeight();
		
		
		if(right_side > w) {
			w = right_side;
		}
		
		if(bottom_side > h) {
			h = bottom_side;
		}

		
		if(left_side < 0) {
			w -= left_side;
		}
		
		if(top_side <0) {
			h -= top_side;
		}
		
		
//		System.out.println("Bottom Side: " + bottom_side);
//		System.out.println("Parent: " + getParent());
//		System.out.println("Get Width: " + w);
//		System.out.println("Get Height: " + h);
//		System.out.println();
		
		if(w != getParent().getWidth() || 
				h != getParent().getHeight() || 
				getWidth() != getParent().getWidth() || 
				getHeight() != getParent().getHeight()) {
			
			setPreferredSize(new Dimension(w, h));
			revalidate();
			
		}
		
	}
}
