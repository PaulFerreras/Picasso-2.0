package picasso2;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.Shape;
import java.awt.event.MouseEvent;
import java.awt.geom.AffineTransform;
import java.awt.geom.Ellipse2D;
import java.awt.geom.Point2D;
import java.awt.image.BufferedImage;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.event.MouseInputAdapter;

//PF: This is where color (chroma) can be selected

public class ColorWheel extends JPanel {
	
	private BufferedImage color_wheel_bi;
	
	/*PF: Width and height variables determine
	 * size of buffered image. Inset determines
	 * distance of color wheel from edges of
	 * buffered image.
	 */
	private int width = 200, height = 200,
				radius, inset = 10,
				center_x, center_y;
	
	/*PF: Circle shape is used to make sure it will color 
	 * the color wheel only inside the circle
	 */
	private Shape circle;
	
	/*PF: This will be the icon that the user can move 
	 * inside the color wheel to select the color 
	 * that they want to use
	 */
	private ColorWheelSelector color_wheel_selector;
	
	//PF: Used to keep track of where mouse was first clicked
	private boolean in_circle;

	public ColorWheel() {
		//PF: Set preferred size
		setPreferredSize(new Dimension(width, height));
		
		setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		/*PF: Create a buffered image with alpha values
		 * Set to the size of the JPanel
		 * **NOTE** alpha values code for transparency
		 * (0 is transparent, 255 is opaque)
		 * BufferedImages of type INT_ARGB 
		 * start with alpha values of 0
		 * Therefore, will be completely transparent
		 * **NOTE** BufferedImage is where the color wheel
		 * will be drawn. This is because when we need to
		 * retrieve the color from the color wheel,
		 * it will be easier to call BufferedImage.getRGB()
		 * than calculating for the actual color
		 */
		color_wheel_bi = new BufferedImage(width, height, BufferedImage.TYPE_INT_ARGB);
		
		
		
		/*PF: Get and store radius
		 * Using inset to make the circle smaller
		 */
		radius = (width / 2) - inset;
		
		/*PF: Create circle shape to use 
		 * Shape.contains() method in double for loop.
		 * This will make sure that it will only
		 * color inside of the circle
		 * Ellipse2D.Float only takes in float values
		 */
		circle = new Ellipse2D.Float((float) inset, (float) inset, (float) radius * 2, (float) radius * 2);
		
		//PF: Place circle at the center of the buffered_image
		center_x = width / 2;
		center_y = height / 2;
		
		//PF: Two for loops are used to draw the color wheel
		for (int row = 0; row < height; row++) {
			for (int col = 0; col < width; col++) {
				
				/*PF: Use Shape.contains() method to draw 
				 * only when inside of the circle
				 */
				if(circle.contains(col, row)) {
					
					/*PF: We must first adjust the
					 * x and y values so that they are in 
					 * reference the center of the circle
					 * **NOTE** Subtraction is used here
					 * because we are actually moving the
					 * x and y values towards the origin
					 * of the component (0, 0),
					 * not the origin of the component
					 * to the center of the circle.
					 */
					
					int x = col - center_x;
					int y = row - center_y;
					
					/*PF: To draw the color wheel, 
					 * we will be using the HSB Color Model
					 * AKA HSV Color Model
					 
					 * **NOTE** HSB Color Model and HSV Color Model
					 * for all intents and purposes are the same.
					 * Java does not support HSL Color Model methods
					 
					 * This is because the HSB Color 
					 * Model is a cylindrical 3D shape which
					 * will be easier to draw on a circle
					 * rather than the RGB Color model
					 * which is a 3D cube.
					 * HSB (HSV) stands for,
					 * Hue,
					 * Saturation,
					 * Brightness (or value),
					 
					 * Reference: https://en.wikipedia.org/wiki/HSL_and_HSV
					 */
					
					/*PF: HUE
					 * Hue is calculated by the
					 * degrees/radians relative to the
					 * center of the circle (x = 0);
					
					 * We may then use the Math.atan2()
					 * method to find Hue in radians
					 * which we then have to divide
					 * the by the total radians (2 PI)
					 * because the HSB color model only 
					 * takes in a decimal hue value
					 */
					double hue = Math.atan2(y, x) / (2 * Math.PI);
					
					
					/*PF: SATURATION
					 * AKA more accurately as CHROMA
					 * Saturation is calculated by the
					 * distance from the point on the
					 * circle to the center of the circle
					 
					 * Point2D.distance() method is used
					 * to determine the distance between
					 * the two points
					 
					 * **NOTE** The center of the circle
					 * is now at (0, 0) 
					 */
					double saturation = Point2D.distance(x, y, 0, 0) / center_x;
					
					/*PF: BRIGHTNESS
					 * Since the HSB color model is a 
					 * cylindrical 3D model, to draw
					 * a 2D circle from this color
					 * model would require a cross-section of the 
					 * color model to be taken. This is 
					 * done by keeping one of the variables constant
					 
					 * Therefore, brightness is set at 1.0, always
					 */
					double brightness = 1;
					
					/*PF: Get HSB color from hue, saturation, and brightness values
					 * **NOTE** Color.getHSBColor() only takes in float values
					 */
					Color hsb_color = Color.getHSBColor((float) hue, (float) saturation, (float) brightness);
					
					/*PF: Set pixel in that BufferedImage to HSB color
					 * **NOTE** BufferedImages only takes in RGB value
					 * so have to convert HSB color back to RGB color using
					 * Color.getRGB();
					 */
					color_wheel_bi.setRGB(col, row, hsb_color.getRGB());
					
					/*PF: Just to clarify, we only need
					 * to use the HSB color model
					 * to map out the RGB color model
					 * onto a circle shape
					 */
				}
			}
		}
		
		//PF: Create graphics from buffered image
		Graphics2D g2 = color_wheel_bi.createGraphics();
		
		//PF: Set color to black
		g2.setColor(Color.BLACK);
		
		//PF: Draw black circle around color wheel as outline
		g2.draw(circle);
		
		//PF: Dispose Graphics2D
		g2.dispose();
		
		/*PF: Create ColorWheelSelector at center of ColorWheel
		 * This will be the icon that the user can move
		 * inside the color wheel to select the color 
		 * that they want to use
		 */
		color_wheel_selector = new ColorWheelSelector(width / 2, height / 2);
		
		//PF: Create ColorWheelListener
		ColorWheelListener cwl = new ColorWheelListener();
		
		//PF: Add ColorWheelListener as Mouse and MouseMotion Listener
		addMouseListener(cwl);
		addMouseMotionListener(cwl);
	}

	/*PF: This is the function called 
	 * when ColorWheel gets repainted.
	 * Overrides paintComponent of JPanel.
	 * This allows Buffered Images to be drawn
	 */
	@Override
	public void paintComponent(Graphics g) {
		/* PF: Send graphics to JPanel above.
		 * Allows the background of the component
		 * to be opaque
		 */
		super.paintComponent(g);
		
		//PF: Draw Buffered Image at (0,0)
		g.drawImage(color_wheel_bi, 0, 0, null);
		
		color_wheel_selector.drawSelector((Graphics2D) g); 
	}
	
//Mouse and MotionListener for ColorWheel	
public class ColorWheelListener extends MouseInputAdapter {
	
	public ColorWheelListener() {
		
	}
	
	/*PF: When mouse is pressed or dragged, 
	 * the color wheel selector is moved to that point.
	 * **NOTE** The color wheel selector cannot 
	 * be moved outside of the color wheel.
	 * If user first clicks outside of the wheel
	 * then drags mouse, the color wheel selector
	 * must not move
	 */
	
	@Override
	public void mousePressed(MouseEvent e) {
		/*PF: If mouse is pressed inside 
		 * of the color wheel circle
		 */
		if(circle.contains(e.getX(), e.getY())) {
			
			//PF: in_circle boolean is set to true
			in_circle = true;
			
			//PF: Color Wheel Selector is moved to mouse's spot
			color_wheel_selector.moveSelector(e.getX(), e.getY());
			
			/*PF: ColorWheel is only repainted if 
			 * the mouse click is inside the circle
			 */
			repaint();
		
		/*PF: If mouse is pressed outside
		 * of the color wheel circle
		 */
		} else {
			
			//PF: in_circle boolean is set to false
			in_circle = false;
		}
	}
	
	@Override
	public void mouseDragged(MouseEvent e) {
		
		/*PF: Checks to see if initial mouse click
		 * is inside of the color wheel circle
		 */
		if(in_circle) {
			
			/*PF: If mouse is dragged inside
			 * of the color wheel circle
			 */
			if(circle.contains(e.getX(), e.getY())) {
				
				//PF: Color Wheel Selector is moved to mouse's spot
				color_wheel_selector.moveSelector(e.getX(), e.getY());

				//PF: Color Wheel Circle gets repainted
				repaint();
				
			/*PF: If mouse is dragged outside
			 * of the color wheel circle
			 */
			} else {
				
				/*PF: The location of the Color Wheel Selector
				 * is calculated on the circumference 
				 * of the Color Wheel Circle.
				 * This is done by calculating the polar 
				 * coordinates of the location and converting 
				 * them to x, y (cartesian) coordinates.
				 */
				
				//PF: Calculate theta by using Math.atan2 method (y, x)
				double radians = Math.atan2(e.getY() - center_y, e.getX() - center_x);

				/*PF: Convert polar coordinates to x, y coordinates 
				 * using following equations:
				 * x = (r * theta) + center
				 * y = (r * theta) + center
				 * with r being the radius of the circle
				 */
				double x = (radius * Math.cos(radians)) + center_x;
				double y = (radius * Math.sin(radians)) + center_y;

				//PF: Color Wheel Selector is moved to the proper x, y coordinate
				color_wheel_selector.moveSelector((int) x, (int) y);

				repaint();

			}
		}
		
	}
	
 }
	
}
