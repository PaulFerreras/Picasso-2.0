package picasso2;

import java.awt.Cursor;
import java.awt.Point;
import java.awt.event.MouseEvent;

import javax.swing.event.MouseInputAdapter;

public class ResizeListener extends MouseInputAdapter {

	private CanvasContainer canvas_container;
	private CanvasPanel canvas_panel;
	private int canvas_width, canvas_height, canvas_min_width, canvas_min_height,
				top_inset, bottom_inset, right_inset, left_inset;
	
	public ResizeListener(CanvasContainer cc, CanvasPanel cp, 
			int top_inset, int bottom_inset, int left_inset, int right_inset) {
		/*PF: Store Canvas Container and Canvas Panel
		 * in private internal variables
		 */
		canvas_container = cc;
		canvas_panel = cp;
		
		/*PF: Get and store canvas width, 
		 * height, min_width, min_height in 
		 * internal private variables
		 */
		canvas_width = canvas_panel.getWidth();
		canvas_height = canvas_panel.getHeight();
		canvas_min_width = (int) canvas_panel.getMinimumSize().getWidth();
		canvas_min_height = (int) canvas_panel.getMinimumSize().getHeight();
		
		//PF: Store top, bottom, left, right insets
		this.top_inset = top_inset;
		this.bottom_inset = bottom_inset;
		this.left_inset = left_inset;
		this.right_inset = right_inset;
	}
	
	/*PF: The mouse turns to the appropriate
	 * resize cursor when moved over 
	 * the bottom, left, or bottom-left
	 * part of the canvas
	 */
	@Override
	public void mouseMoved(MouseEvent e) {
		canvas_container.setCursor(this.getCursor(e.getX(), e.getY()));
	}

	/*PF: Returns the appropriate 
	 * resize cursor based off of
	 * which side or corner 
	 * the mouse is on
	 */
	private Cursor getCursor(int x, int y) {
		
		if(y <= canvas_height 
				&& x > canvas_width && x <= canvas_width + right_inset) {
			return Cursor.getPredefinedCursor(Cursor.E_RESIZE_CURSOR);
		}
		
		if(x <= canvas_width 
				&& y > canvas_height && y <= canvas_height + bottom_inset) {
			return Cursor.getPredefinedCursor(Cursor.S_RESIZE_CURSOR);
		}
		
		if(x > canvas_width && x <= canvas_width + right_inset
				&& y > canvas_height && y <= canvas_height + bottom_inset) {
			return Cursor.getPredefinedCursor(Cursor.SE_RESIZE_CURSOR);
		}
		
		return Cursor.getDefaultCursor();
	}
	
	/*PF: Start Point is instantiated.
	 * It is used as the beginning point
	 * of mouseDragged to determine
	 * how far to resize the canvas
	 */
	private Point start_point = null;
	
	@Override
	public void mousePressed(MouseEvent e) {
		start_point = e.getPoint();
	}
	
	//PF: Right Side and Bottom
	private int right_side, bottom_side,
				x, y, w, h, 
				dx, dy;
	
	@Override
	public void mouseDragged(MouseEvent e) {
		
	}
}
