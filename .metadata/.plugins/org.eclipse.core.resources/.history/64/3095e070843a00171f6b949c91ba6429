package picasso2;

import java.awt.Color;
import java.awt.Cursor;
import java.awt.Dimension;
import java.awt.event.MouseEvent;

import javax.swing.BorderFactory;
import javax.swing.JPanel;
import javax.swing.JToolBar;
import javax.swing.border.Border;
import javax.swing.event.MouseInputAdapter;
import javax.swing.event.MouseInputListener;

/*PF: Draggable ToolBar that holds PicassoButtonPanel
 * Extends JToolBar
 */

public class PicassoToolBar extends JToolBar {
	
	public PicassoToolBar(String name) {
		//PF: Name gets delegated to JToolBar constructor
		super(name);
		
		/*PF: Create Background Panel
		 * and Button Panel
		 */
		JPanel background_panel = new JPanel(null);
		PicassoButtonPanel button_panel = new PicassoButtonPanel();
		
		/*PF: Must set preferred size of Background Panel
		 * for ToolBar to be visible
		 */
		background_panel.setPreferredSize(new Dimension(80, 80));
		
		//PF: Set black line borders around background panel
		background_panel.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		//PF: Add button panel to background panel
		background_panel.add(button_panel);
		
		//PF: Create PicassoToolBarListener
		PicassoToolBarListener picasso_tool_bar_listener = new PicassoToolBarListener(this);
		
		/*PF: Add PicassoToolBarListener as Mouse Listener 
		 * and Mouse Motion Listener
		 */
		addMouseListener(picasso_tool_bar_listener);
		addMouseMotionListener(picasso_tool_bar_listener);
		
		//PF: Add background panel to PicassoToolBar
		add(background_panel);
	}


public class PicassoToolBarListener extends MouseInputAdapter {
	
	private PicassoToolBar picasso_tb;
	
	public PicassoToolBarListener(PicassoToolBar picasso_tb) {
		this.picasso_tb = picasso_tb;
	}
	
	@Override
	public void mouseMoved(MouseEvent e) {
		if(e.getX() < 14) {
			setCursor(Cursor.getPredefinedCursor(Cursor.HAND_CURSOR));
		} else {
			setCursor(Cursor.getDefaultCursor());
		}
	}
	
	@Override
	public void mouseReleased(MouseEvent e) {
		if(getOrientation() == JToolBar.HORIZONTAL) {
			
		}
	}
}
	
}
